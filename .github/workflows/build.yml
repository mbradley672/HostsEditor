name: 'Build and Release'

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable          
        with:
          components: rustfmt, clippy
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev libgtk-3-dev libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev libappindicator3-dev librsvg2-dev libsoup2.4-dev patchelf
      
      - name: Install dependencies
        run: npm install

      - name: Generate Tauri icons
        run: npx tauri icon src-tauri/icons/icon.png

      - name: Build frontend
        run: npm run build

      - name: Check formatting
        run: cargo fmt --all -- --check
        working-directory: src-tauri

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: src-tauri
      
      - name: Run tests
        run: cargo test
        working-directory: src-tauri

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel (x86_64)
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            os_name: macos-intel
          # macOS Apple Silicon (ARM64)
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            os_name: macos-arm64
          # Linux x86_64
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            arch: x64
            os_name: linux-x64
          # Windows x86_64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            os_name: windows-x64
          # Windows ARM64
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            os_name: windows-arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Debug npm and node versions
        run: |
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "npm location: $(which npm)"
          echo "PATH: $PATH"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev libgtk-3-dev libwebkit2gtk-4.0-dev libjavascriptcoregtk-4.0-dev libappindicator3-dev librsvg2-dev libsoup2.4-dev patchelf

      - name: Install dependencies
        run: npm install

      - name: Generate Tauri icons
        run: npx tauri icon src-tauri/icons/icon.png

      - name: Build application
        run: npm run tauri build -- --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload Windows x64 artifacts
        if: matrix.platform == 'windows-latest' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: hosts-editor-windows-x64
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload Windows ARM64 artifacts
        if: matrix.platform == 'windows-latest' && matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: hosts-editor-windows-arm64
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload macOS Intel artifacts
        if: matrix.platform == 'macos-latest' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: hosts-editor-macos-intel
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.app
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload macOS ARM64 artifacts
        if: matrix.platform == 'macos-latest' && matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: hosts-editor-macos-arm64
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.app
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

      - name: Upload Linux x64 artifacts
        if: matrix.platform == 'ubuntu-22.04' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: hosts-editor-linux-x64
          path: |
            src-tauri/target/${{ matrix.target }}/release/hosts-editor
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
